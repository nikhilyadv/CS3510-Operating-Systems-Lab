[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;
alias userSP R1;
userSP = SP;
alias ret R2;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
alias fileDescriptor R3;
fileDescriptor = [[PTBR + 2 * ((userSP - 4)/ 512)] * 512 + (userSP - 4) % 512];
alias word R4;
word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
if (fileDescriptor == -2) then
	multipush(R1,R2,R3,R4);
	R1 = 3;									//Terminal Write
	R2 = [SYSTEM_STATUS_TABLE + 1];			//pid
	R3 = word;								//word to be printed
	call MOD_4;
	multipop(R1,R2,R3,R4);
	ret = 0;
	goto lb2;
else
	if (fileDescriptor < 0 || fileDescriptor > 7) then
		ret = -1;
		goto lb2;
	endif;
	alias perprocesstable R5;
	perprocesstable = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]) * 512 + (512 - 16);
	if ([perprocesstable + 2 * fileDescriptor] != FILE) then
		ret = -1;
		goto lb2;
	endif;
	alias filetableindex R6;
	alias inodetableindex R7;
	filetableindex = [perprocesstable + 2 * fileDescriptor + 1];
	inodetableindex = [OPEN_FILE_TABLE + 4 * filetableindex + 0];
	if ([INODE_TABLE + 16 * inodetableindex + 3] != [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 3] && [INODE_TABLE + 16 * inodetableindex + 4] == EXCLUSIVE) then
		ret = -3;
		goto lb2;
	endif;
	multipush(R1,R2,R3,R4,R5,R6,R7);
	R1 = 4;
	R2 = inodetableindex;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;										//acquire inode
	multipop(R1,R2,R3,R4,R5,R6,R7);
	if (R0 != 0) then
		ret = -1;
		goto lb1;
	endif;
	alias lseek R8;
	lseek = [OPEN_FILE_TABLE + 4 * filetableindex + 2];
	if (lseek == MAX_FILE_SIZE) then
		ret = -2;
		goto lb1;
	else
		if (lseek % 512 == 0 && [INODE_TABLE + 16 * inodetableindex + 2] == lseek) then
			multipush(R1,R2,R3,R4,R5,R6,R7,R8);
			R1 = 3;
			call MOD_2;
			multipop(R1,R2,R3,R4,R5,R6,R7,R8);
			[INODE_TABLE + 16 * inodetableindex + 8 + (lseek / 512)] = R0; 
			if (R0 == -1) then
				ret = -2;
				goto lb1;
			endif;
		endif;
		R9 = (lseek) / 512;
		R10 = (lseek) % 512;
		R11 = [INODE_TABLE + 16 * inodetableindex + 8 + R9];
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
		R1 = 1;
		R2 = R11;
		R3 = R10;
		R4 = word;
		call MOD_3;
		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
		if (lseek == [INODE_TABLE + 16 * inodetableindex + 2]) then
			[INODE_TABLE + 16 * inodetableindex + 2] = [INODE_TABLE + 16 * inodetableindex + 2] + 1;
			[ROOT_FILE + 8 * inodetableindex + 1] = [ROOT_FILE + 8 * inodetableindex + 1] + 1;
		endif;
		[OPEN_FILE_TABLE + 4 * filetableindex + 2] = [OPEN_FILE_TABLE + 4 * filetableindex + 2] + 1;
		ret = 0;
		goto lb1;
	endif;
	lb1:
		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
		R1 = 5;
		R2 = inodetableindex;
		R3 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;							//release inode
		multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
endif;
lb2:
	alias physicalAddrRetVal R10;
	physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = ret;
	SP = userSP;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	ireturn;