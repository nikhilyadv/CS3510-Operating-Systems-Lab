Stage - 1
	Just installation
Stage - 2
	The downloaded expos package is machine simulator. It has a processor, memory and disk.
	It is bare machine. It just has boot ROM.
	3 support tools -
						1) 2 * compliers
						2) 1 * disk interface -> xfs-interface 
	Disk has 512 blocks, each capable of storing 512 words.
	The eXpFS logical file system comprises of files organized in a single directory called the root.
	Associated with each eXpFS file there are three attributes - name, size and type, each attribute being one word long.
	There are three types of eXpFS files - the root, data files and executable files. Each file in eXpFS has an entry in the root called its root entry.
		1) Root file - The root file has the name root and contains meta-data about the files stored in the file system. For each file stored in eXpFS, the root file stores three words of information - file name, file-size and file-type. Operations allowed - Open, Close, Read and Seek.
		2) Data file - A data file is a sequence of words. Operations allowed - Create, Delete, Open, Close, Read, Write, Seek.
		3) Executable file - These contain executable code for programs that can be loaded and run by the operating system. eXpFS specification does not allow executable files to be created by application programs.
	The eXpFS format specifies that each data/executable file can span across at most four data blocks, and that the index to these blocks along with the name and the size of the file must be stored in a pre-define area of the disk called the Inode table.
	The inode table is stored in disk blocks 3 and 4. The Inode table is stored in the disk and has an entry for each file present in the disk.
	Each Inode table entry stores the name, size, type and data block numbers of a file stored in the disk.
	Entries in inode and root table shoulde match.
--->Q. Why inode and root tables?
	A. Inode table is a data structure which is accessible only in Kernel mode, whereas Root file is accessible both in Kernel and User mode. This enables the user to search for a file from an application program itself by reading the Root file.
	./xfs-interface -> to xfs-interface.
	fdisk -> to format.
	The first 69 blocks (blocks 0 to 68) are reserved for Disk Structures, OS routines, Shell Code, Idle Code and INIT program (see Disk Organization). Hence it is marked as 1 (used) and the remaining entries for blocks 69 to 511 are 0 (unused).
	Usertable - username and enycrpted password.
	rm <filename> -> to remove file.
	Two contiguous memory words are necessary to store each XSM instruction.
	Machine Organisation -
		Processor -
			The processor has two fundamental modes of operation - privileged execution mode and the unprivileged execution mode. A program executing in the privileged mode can execute any XSM instruction and has the full view of the memory and the disk. A program executing in the unprivileged mode has access only to a restricted machine model called the XSM virtual machine.
		Registers and Ports -
			The XSM architecture maintains 29 registers, each capable of storing a word.
				Unprivileged - R0-R19, BP, SP, IP
		Memory -
			The memory is organized as a sequence of pages. Each page is a sequence of 512 words. The total number of memory pages available is 128. Thus there are in total 512 x 128 = 65536 words of storage. The memory is word addressable.
		Disk -
			The disk is organized as a sequence of 512 blocks. Each block is a sequence of 512 words. Thus there are a total of 512 x 512 = 262144 words of secondary storage.The disk is block accessible and not word accessible. This means that a word within a block can be accessed individually only after transferring the block into memory and then accessing the corresponding word from the memory.
Stage - 3
	Devices -
		1) Memory - 512 * 128. Word addressable.
		2) Disk - 512 * 512. Block addressable. Loaded into memory then used.
		3) I/O console -
		4) Timer -
		5) Disk Controller -
	ROM is stored on the first page of memory and is hard coded.
	Power on -> privileged mode -> register initialized to zero -> fetch-execute cycle.
	When the machine is just powered on, IP value is 0. Hence, the first instruction will be fetched from memory locations 0 and 1. The XSM machine has a boot ROM containing just two instructions:
	Locations 	Intruction 					Meaning
	    0		 LOADI 1,0			Load contents of disk block 0 to memory page 1
	    2		 JMP 512			Change IP value to 512
Stage - 4
	SPL
Stage - 5
	breakpoint -> spl
	./xsm --debug
	reg or r -> show register values
	mem <page number> or m <page number> ->show memory page
	s -> step<page number>
	c -> continue
	v <memory location> -> show memory location 
Stage - 6
	For unprivileged instruction all addressess are treated as logical addressess. They are first converted into physical address using address translation mechanism.
	PTBR -> Page table base register // setable privileged mode only.
	PTLR -> Page table length register //10 by default
	Every user mode program has an associated page table which maps its virtual address space to machine's physical address space.
	Each page table entry for a logical page is of 2 words. 1st word is physical page number in the memory where the logical page is actually loaded. 2nd word stores a sequence of flag buts storing information reagarding whether the page is - valid/invalid , read only / read and write , has been reference in the user mode after being set to valid , dirt bit.
	Steps ->
		1) find logical page number and offset
			#lpageno = (laddress/512)
			#offset = (laddress%512)
		2) find physical page number
			#pageno = (ptbr + 2*lpageno);
		3) fund physical page address
			#ppageno = 512 * #pageno
		4) physical address = physical page address + offset
			#paddress = #ppageno + #offset
	The eXpOS design stipulates that the INIT program must be stored in blocks 7 and 8 of the XSM disk.
	INT 10 -> This interrupt handler is responsible for graceful termination of the user program.
	Exception handler ->  The machine may raise an exception if it encounters any unexpected events like illegal instruction, invalid address, page table entry for a logical page not set valid etc.
Stage - 7
	Application Binary Interface (ABI) -
		An application binary interface (ABI) is the interface between a user program and the kernel.
		The eXpOS ABI defines the following:
			The machine model 
			A logical division of the memory address space into regions 
			The file format
			A low level system call interface 
			The low level runtime library interface
		First 2 pages for library next 2 for heap next 4 for code and last 2 for stack.
		Executable files in eXpOS must be in the XEXE format as eXpOS executes only files of such format.
		An XEXE executable file in eXpOS consists of two parts:
			1. Header
			2. Code
		The first eight words of an executable file are reserved for the header which describes the features of file. The structure of the header is :
		XMAGIC - Entry point - Text Size - Data Size - Heap Size - Stack size - Library Flag - Unused
Stage - 8
	Timer -> (--timer 2 means that after every instrucion it will give timer)
Stage - 9
	Kernel stack used to store contents of registers when interupt occurs.
	Backup and Restore instructions.
	Need to store its value in process table.
	user stack stores IP+2 and then user mode is changed to kernel mode and then control is transfered to interrut service routine or exception handler, which in turns switches from user stack to kernel stack, saves the values of current machine register in kernel stack and then run interupt cod. After completing that it restores value of machine register,set the value of stack pointer to the top of user stack. Finally transfer control back to user process.
	


Stage - 20
	Fork system call
	child and parent share code and heap regions of the address space(the child will be allocated with 2 new stack pages and a new user area page).
	Contents of pre-process resource table(last 16(8*2) entries of user area page) in the user are page of parent are copied to the child and the kernel stack of the child is empty.
	ExpL compiler allocates local variables, global variables and arrays of primitive data types (int, string) of a process in the stack. Since the parent and child processes have different memory pages for the user stack, they resume after fork with separate private copies of these variables, with the same values. 
	Since the Parent and child processes can concurrently access/modify the heap pages, they need support from the OS to synchronize access to the shared heap memory. eXpOS provides support for such synchronization through systems calls for semaphores and signal handling. These will be discussed in later stages. Even though, code and library pages are shared among parent and child processes, synchronization is not required for these pages as their access is read only.


#########################################################################
Links -
	Process table - http://exposnitc.github.io/os_design-files/process_table.html
	Memory and Disk implementation - http://exposnitc.github.io/os_implementation.html
	Modules - 
			1) Process manager - http://exposnitc.github.io/os_modules/Module_1.html
			2) Memory manager - http://exposnitc.github.io/os_modules/Module_2.html
			5) Context Switch - http://exposnitc.github.io/os_modules/Module_5.html
