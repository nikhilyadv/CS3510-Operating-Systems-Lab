//  12 -> R0 (userSP),  16 -> R1 (syscallNumber)
//  
//	
//  Implements Semget, Semrelease system calls
//
//
//
//
//
//
alias userSP R0;
userSP = SP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;  // saving user stack value
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;  // setting up kernal stack
alias syscallNumber R1;
syscallNumber = [[PTBR + 2 * ((userSP - 5)/ 512)] * 512 + (userSP - 5) % 512];
if (syscallNumber == 17) then  // Semget system call
// Semget system call is used to acquire a new semaphore. Semget finds a free entry in the per-process resource table. Semget then creates a new entry in the semaphore table by invoking the Acquire Semaphore function of resource manager module. The index of the semaphore table entry returned by Acquire Semaphore function is stored in the free entry of per-process resource table of the process. Finally, Semget system call returns the index of newly created entry in the per-process resource table as semaphore descriptor (SEMID).
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 17;  // setting mode
	alias perProcessTable R2;
	perProcessTable = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] + 1) * 512 - 16;
	alias cnter R3;
	cnter = 0;
	alias found R4;
	found = -1;
	while (cnter < 16) do
		if ([perProcessTable + cnter] == -1) then
			found = (cnter / 2);
			break;
		endif;
		cnter = cnter + 2;
	endwhile;
	if (found == -1) then
		[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = -1;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	
		SP = userSP;
		ireturn;
	endif;
	[perProcessTable + 2 * found] = SEMAPHORE;
	alias semaphoreTableIndex R5;
	multipush (R0, R1, R2, R3, R4);
	R1 = 6;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	semaphoreTableIndex = R0;
	multipop (R0, R1, R2, R3, R4);
	if (semaphoreTableIndex == -1) then
		[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = -2;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	
		SP = userSP;
		ireturn;
	endif;
	[perProcessTable + 2 * found + 1] = semaphoreTableIndex;
	[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = found;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
endif;
if (syscallNumber == 18) then  // Semrelease system call
// Semrelease system call takes semaphore desciptor (SEMID) as argument from user program.Semrelease system call is used to detach a semaphore from the process. Semrelease releases the acquired semaphore and wakes up all the processes waiting for the semaphore by invoking the Release Semaphore function of resource manager module. Semrelease also invalidates the per-process resource table entry corresponding to the SEMID given as an argument.
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 18;  // setting mode
	alias semID R2;
	semID = [[PTBR + 2 * ((userSP - 4)/ 512)] * 512 + (userSP - 4) % 512];
	semID = 2 * semID;
	if (((semID % 2) == 1) || (semID < 0 || semID >= 16)) then
		print ("c13");
		[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = -1;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	
		SP = userSP;
		ireturn;
	endif;
	alias perProcessTable R3;
	perProcessTable = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] + 1) * 512 - 16;
	if ([perProcessTable + semID] != SEMAPHORE) then
		print ("c13");
		[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = -1;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	
		SP = userSP;
		ireturn;
	endif;
	multipush (R0, R1, R2, R3);
	R1 = 7;
	R2 = [perProcessTable + semID + 1];  // dont worry, perProcesssTable had R3 and semID had R2
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;
	multipop (R0, R1, R2, R3);
	[perProcessTable + semID] = -1;
	[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = 0;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
endif;
SP = userSP;
ireturn;
