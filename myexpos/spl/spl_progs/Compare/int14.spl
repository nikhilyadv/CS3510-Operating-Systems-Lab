//  12 -> R0 (userSP),  16 -> R1 (syscallNumber)
//  
//
//	
//  Implements Semlock, Semunlock system calls
//
//
//
//
//
//
alias userSP R0;
userSP = SP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;  // saving user stack value
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;  // setting up kernal stack
alias syscallNumber R1;
syscallNumber = [[PTBR + 2 * ((userSP - 5)/ 512)] * 512 + (userSP - 5) % 512];
if (syscallNumber == 19) then  // Semlock system call
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 19;  // setting mode
	alias semID R2;
	semID = [[PTBR + 2 * ((userSP - 4)/ 512)] * 512 + (userSP - 4) % 512];
	semID = 2 * semID;
	if (((semID % 2) == 1) || (semID < 0 || semID >= 16)) then
		[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = -1;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	
		SP = userSP;
		ireturn;
	endif;
	alias perProcessTable R3;
	perProcessTable = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] + 1) * 512 - 16;
	if ([perProcessTable + semID] != SEMAPHORE) then
		[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = -1;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	
		SP = userSP;
		ireturn;
	endif;
	alias semphoreTableIndex R4;
	semphoreTableIndex = [perProcessTable + semID + 1];
	while (([SEMAPHORE_TABLE + (semphoreTableIndex * 4)] != [SYSTEM_STATUS_TABLE + 1]) && ([SEMAPHORE_TABLE + (semphoreTableIndex * 4)] != -1)) do  // i.e. locked by some other process
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = WAIT_SEMAPHORE;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 5] = semphoreTableIndex;
		multipush (R0, R1, R2, R3, R4);
		call MOD_5;
		multipop (R0, R1, R2, R3, R4);
	endwhile;
	[SEMAPHORE_TABLE + (semphoreTableIndex * 4)] = [SYSTEM_STATUS_TABLE + 1];  // lock it
	[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = 0;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
endif;
if (syscallNumber == 20) then  // Semunlock system call
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 20;  // setting mode
	alias semID R2;
	semID = [[PTBR + 2 * ((userSP - 4)/ 512)] * 512 + (userSP - 4) % 512];
	semID = 2 * semID;
	if (((semID % 2) == 1) || (semID < 0 || semID >= 16)) then
		[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = -1;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	
		SP = userSP;
		ireturn;
	endif;
	alias perProcessTable R3;
	perProcessTable = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] + 1) * 512 - 16;
	if ([perProcessTable + semID] != SEMAPHORE) then
		[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = -1;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	
		SP = userSP;
		ireturn;
	endif;
	alias semphoreTableIndex R4;
	semphoreTableIndex = [perProcessTable + semID + 1];
	if ([SEMAPHORE_TABLE + (semphoreTableIndex * 4)] != -1) then  // i.e. locked
		if ([SEMAPHORE_TABLE + (semphoreTableIndex * 4)] != [SYSTEM_STATUS_TABLE + 1]) then
			[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = -2;
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	
			SP = userSP;
			ireturn;
		endif;
		[SEMAPHORE_TABLE + (semphoreTableIndex * 4)] = -1;
		alias cnter R5;
		cnter = 0;
		while (cnter < 16) do
			if ([PROCESS_TABLE + cnter * 16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + cnter * 16 + 5] == semphoreTableIndex) then
				[PROCESS_TABLE + cnter * 16 + 4] = READY;
				[PROCESS_TABLE + cnter * 16 + 5] = 0;
			endif;
			cnter = cnter + 1;
		endwhile;
	endif;
	[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = 0;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
endif;
SP = userSP;
ireturn;