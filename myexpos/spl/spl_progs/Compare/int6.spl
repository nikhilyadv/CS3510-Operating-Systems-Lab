// Always make register check in the end.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7;
alias userSP R5;
userSP = SP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
alias fileDesc R6;
fileDesc = ([PTBR + 2 * ((userSP - 4)/ 512)] * 512) + (userSP - 4) % 512;
fileDesc = [fileDesc];
alias toRet R7;
toRet = 0;  // sanity
if (fileDesc == -1) then  // call terminal read
	multipush (R5, R7);
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
	//breakpoint;
	call MOD_4; // Note: Terminal read itself converts logical address to physical address.
	//breakpoint;
	multipop (R5, R7);
	goto label1;
endif;
if (fileDesc < 0 || fileDesc > 7) then
	toRet = -1;
	goto label1;
endif;
alias perProcess R8;
perProcess = ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] + 1) * 512 - 16;
perProcess = perProcess + 2 * fileDesc;
if ([perProcess] != FILE) then
	toRet = -1;
	goto label1;
endif;
alias fileTableIndex R9;
fileTableIndex = [perProcess + 1];
alias inodeTableIndex R10;
inodeTableIndex = [OPEN_FILE_TABLE + fileTableIndex * 4];
R1 = 4;  // acquire inode
R2 = inodeTableIndex;
R3 = [SYSTEM_STATUS_TABLE + 1];
multipush (R5, R7, R9, R10);
call MOD_0;  // requires userSP, toRet, fileTableIndex, inodetableindex.
multipop (R5, R7, R9, R10);
if (R0 < 0) then
	toRet = -1;
	goto label1;
endif;
alias lseek R11;
lseek = [OPEN_FILE_TABLE + fileTableIndex * 4 + 2];
alias memoryBuffer R12;
memoryBuffer = ([PTBR + 2 * ((userSP - 3)/ 512)] * 512) + (userSP - 3) % 512;
memoryBuffer = [memoryBuffer];  // now has logical address
memoryBuffer = [PTBR + 2 * (memoryBuffer / 512)] * 512 + (memoryBuffer % 512);  // now has pysical address
if (inodeTableIndex == INODE_ROOT) then
	if (lseek == 480) then  // i.e. lseek is same as root file size
		R1 = 5;  // release inode
		R2 = inodeTableIndex;
		R3 = [SYSTEM_STATUS_TABLE + 1];
		multipush (R5);
		call MOD_0;
		multipop (R5);
		toRet = -2;
		goto label1;
	endif;
	[memoryBuffer] = [ROOT_FILE + lseek];
	[OPEN_FILE_TABLE + fileTableIndex * 4 + 2] = [OPEN_FILE_TABLE + fileTableIndex * 4 + 2] + 1; // increment lseek.
else
	// else part

	alias fileSize R13;	
	fileSize = [INODE_TABLE + inodeTableIndex * 16 + 2];
	if (lseek == fileSize) then	
		R1 = 5;  // release inode
		R2 = inodeTableIndex;
		R3 = [SYSTEM_STATUS_TABLE + 1];
		multipush (R5);
		call MOD_0;
		multipop (R5);
		toRet = -2;
		goto label1;
	endif;
	alias start R14;
	start = INODE_TABLE + inodeTableIndex * 16 + 8;
	start = start + (lseek / 512);
	start = [start];  // our disk block number
	// calling buffer read
	R1 = 2;
	R2 = start;
	R3 = (lseek % 512);
	R4 = memoryBuffer;
	multipush (R9, R5, R10, R7);
	call MOD_3;  // we need after this: fileTableIndex, userSP, inodeTableEndex and toRet
	multipop (R9, R5, R10, R7);
	[OPEN_FILE_TABLE + fileTableIndex * 4 + 2] = [OPEN_FILE_TABLE + fileTableIndex * 4 + 2] + 1; // increment lseek.
endif;
R1 = 5;  // release inode
R2 = inodeTableIndex;
R3 = [SYSTEM_STATUS_TABLE + 1];
multipush (R5, R7);
call MOD_0;
multipop (R5, R7);
goto label1;
label1:
	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = toRet;
	SP = userSP;
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	ireturn;