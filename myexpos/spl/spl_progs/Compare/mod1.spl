//////////////Process Manager
alias functionNum R1;
if (functionNum == 1) then  // Get PCB entry
	multipush (R2);
	alias cnter R2;
	cnter = 0;
	while (cnter < 16) do  // See which entry is free
		if ([PROCESS_TABLE + 4 + cnter * 16] == TERMINATED) then
			[PROCESS_TABLE + 4 + cnter * 16] = ALLOCATED;  // state
			[PROCESS_TABLE + 1 + cnter * 16] = cnter;  // pid
			[PROCESS_TABLE + 15 + cnter * 16] = 10; // ptlr
			[PROCESS_TABLE + 14 + cnter * 16] = PAGE_TABLE_BASE + 20 * cnter;  // ptbr
			R0 = cnter;
			multipop (R2);
			return;
			break;	 // Sanity :)
		endif;
		cnter = cnter + 1;
	endwhile;
	multipop (R2);	
	R0 = -1;  // Not available
	return;
endif;
if (functionNum == 2) then  // free user area page
	alias currentPID R2;  // currentPID is in R2, which I am copying in R3...
	alias upgnumber R3;
	upgnumber = [PROCESS_TABLE + currentPID * 16 + 11];
	alias perProcessTable R4;
	perProcessTable = ([PROCESS_TABLE + (currentPID * 16) + 11] + 1) * 512 - 16;	
	alias cnter R5;
	cnter = 0;	
	// R4 (perProcess), R5 (cnter), R2 (currentPID), R3 (upgnumber) is to be saved...
	while (cnter < 7) do
		if ([perProcessTable + 2 * cnter] == SEMAPHORE) then
			multipush (R2, R3, R4, R5);
			R1 = 7;  // release semaphore
			R3 = currentPID;
			R2 = [perProcessTable + 2 * cnter + 1];
			call MOD_0;
			multipop (R2, R3, R4, R5);
		endif;
		if ([perProcessTable + 2 * cnter] == FILE) then
			multipush (R2, R3, R4, R5);
			R1 = 4;  // calling close in file manager module
			R2 = [perProcessTable + 2 * cnter + 1];	
			call MOD_3;
			multipop (R2, R3, R4, R5);
		endif;
		cnter = cnter + 1;
	endwhile;
	R1 = 2;  // calling release page.
	R2 = upgnumber;
	call MOD_2;
	return;
endif;
if (functionNum == 3) then  // exit process
	alias currentPID R2;
	multipush (R1, R2, R3);
	if ([PROCESS_TABLE + currentPID * 16 + 9] != 9) then
		alias cnter R1;  // dont modify R2...
		cnter = 0;
		while (cnter < 16) do
			if ([PROCESS_TABLE + cnter * 16 + 4] == WAIT_PROCESS && [PROCESS_TABLE + cnter * 16 + 5] == currentPID) then
				[PROCESS_TABLE + cnter * 16 + 4] = READY;
				[PROCESS_TABLE + cnter * 16 + 5] = 0;
			endif;
			if ([PROCESS_TABLE + cnter * 16 + 2] == currentPID) then  // ppid
				[PROCESS_TABLE + cnter * 16 + 2] = -1;	
			endif;
			cnter = cnter + 1;
		endwhile;
		if ([SYSTEM_STATUS_TABLE + 2] > MEM_HIGH) then  // call swap in...
			R1 = 2;
			R2 = [SYSTEM_STATUS_TABLE + 1];
			call MOD_6;
		endif;
	endif;
	multipop (R1, R2, R3);
	multipush (R1, R2, R3);
	R1 = 4;  // free page table
	// R2 has already current PID
	call MOD_1;
	multipop (R1, R2, R3);
	multipush (R1, R2, R3);
	R1 = 2;   // free user area page
	// R2 already has current PID
	call MOD_1;
	multipop (R1, R2, R3);
	
	[PROCESS_TABLE + currentPID * 16 + 4] = TERMINATED;
	return;
endif;
if (functionNum == 4) then  // free page table
	alias currentPID R2;
	///////////////mod of stage 19////////////////
	///1) Go through the heap and stack entries in the disk map table of the process with given PID. If any valid entries are found, invoke the Release Block function in the memory manager module.
    ///2) Invalidate all the entries of the disk map table. 
	multipush (R1, R2, R3, R4);  
	alias cnter R3;
	cnter = 2;
	alias dt R4;
	dt = DISK_MAP_TABLE + currentPID * 10; 
	while (cnter < 10) do
		if (cnter == 4) then
			cnter = 8;
			continue;
		endif;
		if ([dt + cnter] != -1) then
			multipush (R1, R2, R3, R4); 
			R1 = 4;  // calling release block
			R3 = R2;
			R2 = [dt + cnter];
			call MOD_2;
			multipop (R1, R2, R3, R4); 
		endif;
		cnter = cnter + 1;
	endwhile;
	cnter = 0;
	while (cnter < 10) do
		[dt + cnter] = -1;
		cnter = cnter + 1;
	endwhile;
	multipop (R1, R2, R3, R4);
	///////////////end////////////////
	multipush (R4);
	alias bptbr R4;
	bptbr = PTBR;
	PTBR = [PROCESS_TABLE + currentPID * 16 + 14];	
	//Library
	[PTBR+0] = -1;
	[PTBR+1] = "0000";
	[PTBR+2] = -1;
	[PTBR+3] = "0000";
	multipush (R3);
	cnter = 4;
	while (cnter < 20) do
		if ([PTBR + cnter] != -1) then
			multipush (R1, R2, R3, R4, R5);
			R1 = 2;
			R2 = [PTBR + cnter];
			call MOD_2;  // release page
			multipop (R1, R2, R3, R4, R5);
			[PTBR + cnter] = -1;
			[PTBR + cnter + 1] = "0000";
		endif;
		cnter = cnter + 2;
	endwhile;
	PTBR = bptbr;
	multipop (R3);
	multipop (R4);
	return;
endif;
if (functionNum == 5) then  // kill all, kills all the process except the current process, idle, init/login.
	alias currentPID R2;
	alias cnter R5;
	cnter = 0;
	while (cnter < 60) do
		alias at R6;
		at = [INODE_TABLE + (cnter * 16) + 1];
		if (at != -1) then
			multipush (R2, R5);
			R1 = 4;  // acquire inode
			R2 = cnter;
			R3 = [SYSTEM_STATUS_TABLE + 1];
			call MOD_0;
			multipop (R2, R5);
		endif;
		cnter = cnter + 1;
	endwhile;
	cnter = 2;
	while (cnter < MAX_PROC_NUM) do
		if (cnter != currentPID && [PROCESS_TABLE + cnter * 16 + 4] != TERMINATED) then
			multipush (R1, R2, R5);
			R1 = 3;  // calling exit process
			R2 = currentPID;
			call MOD_1;
			multipop (R1, R2, R5);
		endif;
		cnter = cnter + 1;
	endwhile;
	cnter = 0;
	while (cnter < 60) do
		alias at R6;
		at = [INODE_TABLE + (cnter * 16) + 1];
		if (at != -1) then
			multipush (R5);  // cnter is R5
			R1 = 5;  // release inode
			R2 = cnter;
			R3 = [SYSTEM_STATUS_TABLE + 1];
			call MOD_0;
			multipop (R5);
		endif;
		cnter = cnter + 1;
	endwhile;
	return;
endif;
return;