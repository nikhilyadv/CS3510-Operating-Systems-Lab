//////////////////////Memory Manager
multipush (R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
alias functionNum R1;
if (functionNum == 1) then  // get free page
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;  // increment wait mem count, (wait_mem_count)
	while ([SYSTEM_STATUS_TABLE + 2] == 0) do  // i.e. if the memory is full, (mem_free_count)
		R1 = 1;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_6;  // call swap out
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = WAIT_MEM;
		call MOD_5;
	endwhile;
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
	alias cnter R2;
	cnter = 76;
	alias found R3;
	found = -1;
	while (cnter < 128) do
		if ([MEMORY_FREE_LIST + cnter] == 0) then
			found = cnter;
			break;
		endif;
		cnter = cnter + 1;
	endwhile;
	[MEMORY_FREE_LIST + found] = 1;
	R0 = found;
	goto label1;
endif;
if (functionNum == 2) then  // release page
	alias pgnumber R2;
	[MEMORY_FREE_LIST + pgnumber] = [MEMORY_FREE_LIST + pgnumber] - 1;
	if ([MEMORY_FREE_LIST + pgnumber] == 0) then
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;	
	endif;
	alias cnter R3;
	cnter = 0;
	while (cnter < 16) do
		if ([PROCESS_TABLE + cnter * 16 + 4] == WAIT_MEM) then
			[PROCESS_TABLE + cnter * 16 + 4] = READY;
		endif;
		cnter = cnter + 1;
	endwhile;
	goto label1;
endif;
if (functionNum == 3) then  // get free block
	alias cnter R3;
	cnter = DISK_FREE_AREA;
	R0 = -1;
	while (cnter < DISK_SWAP_AREA) do
		if ([DISK_FREE_LIST + cnter] == 0) then
			[DISK_FREE_LIST + cnter] = 1;
			R0 = cnter;
			break;
		endif;
		cnter = cnter + 1;
	endwhile;
	goto label1;
endif;
if (functionNum == 4) then  // Release Block
	alias bnumber R2;
	alias pid R3;
	// an entry in disk free list contains either 0 or 1.
	[DISK_FREE_LIST + bnumber] = [DISK_FREE_LIST + bnumber] - 1;
	goto label1;
endif;
if (functionNum == 5) then  // get code page
	alias bnumber R2;
	alias cnter R3;
	alias at R4; 
	alias cnter2 R5;
	alias pnumber R7;
	cnter = 0;
	while (cnter < 16) do   // cnter is pid
		at = DISK_MAP_TABLE + cnter * 10;
		cnter2 = 4;
		while (cnter2 < 8) do
			pnumber = [PAGE_TABLE_BASE + cnter * 20 + 2 * cnter2]; 
			if (([at + cnter2] == bnumber) && (pnumber != -1)) then
				[MEMORY_FREE_LIST + pnumber] = [MEMORY_FREE_LIST + pnumber] + 1;		
				R0 = pnumber;
				goto label1;
				break;
			endif;
			cnter2 = cnter2 + 1;
		endwhile;
		cnter = cnter + 1;
	endwhile;
	R1 = 1;  // get free page
	call MOD_2;
	// R0 has the requisite value
	R6 = R0;
	R5 = R2;
	R1 = 2;  // calling disk load.
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = R0;
	R4 = R5;
	call MOD_4;
	R0 = R6;
	goto label1;
endif;
if (functionNum == 6) then  // get swap block
	alias cnter R3;
	cnter = DISK_SWAP_AREA;
	R0 = -1;
	while (cnter < 512) do
		if ([DISK_FREE_LIST + cnter] == 0) then
			[DISK_FREE_LIST + cnter] = 1;
			R0 = cnter;
			break;
		endif;
		cnter = cnter + 1;
	endwhile;	
	goto label1;
endif;
label1:
	multipop (R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
	return;