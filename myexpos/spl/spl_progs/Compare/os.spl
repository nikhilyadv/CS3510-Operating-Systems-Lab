// PreProcess
// pages 81 is are free
breakpoint;
loadi(69,11);  // only loading one memory page for idle and not 2. (initially there was 70 as well)
loadi(54, 67);
loadi(55, 68);  // these two lines are for module 7
SP = 76 * 512 - 1;
call MOD_7;
// for idle
[PROCESS_TABLE + 11] = 76;  // user area page
[PROCESS_TABLE + 1] = 0;  // pid
[PROCESS_TABLE + 4] = RUNNING;  // state
[PROCESS_TABLE + 13] = 8 * 512; // user stack pointer UPTR
[PROCESS_TABLE + 12] = 0; // KPTR
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE; // PTBR
[PROCESS_TABLE + 15] = 10; // PTLR
[SYSTEM_STATUS_TABLE + 1] = 0; // idle
// for idle
PTBR=PAGE_TABLE_BASE;  //as PID of idle process is 0
PTLR = 10;
// As idle process does not use library functions or dynamic memory allocation, it doesn't need library and heap pages. Therefore, you need to set up entries for only the code and stack pages. 
// As memory requirements of idle are very low, we need to allocate only one physical page for stack. We will allocate page 81 for stack as pages 76-80 will be used by the init process
//Library
[PTBR+0] = -1;
[PTBR+1] = "0000";
[PTBR+2] = -1;
[PTBR+3] = "0000";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 70;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";
[70 * 512] = [69*512 + 1];
SP = 8 * 512;
ireturn;