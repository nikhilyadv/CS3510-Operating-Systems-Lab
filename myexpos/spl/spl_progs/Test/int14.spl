[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
alias userSP R1;
userSP = SP;
alias ret R2;
ret = 0;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]*512 - 1;
alias SyscallNumber R3;
SyscallNumber = [[PTBR + 2 * ((userSP - 5)/ 512)] * 512 + (userSP - 5) % 512];
if (SyscallNumber == 19) then				//SemLock
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 19;
	alias sdescriptor R4;
	alias perprocesstable R5;
	sdescriptor = [[PTBR + 2 * ((userSP - 4)/ 512)] * 512 + (userSP - 4) % 512];
	perprocesstable = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]) * 512 + (512 - 16);
	if (sdescriptor >= 0 && sdescriptor < 8 && [perprocesstable + 2*sdescriptor] == 1) then
		while ([SEMAPHORE_TABLE + 4 * [perprocesstable + 2*sdescriptor + 1]] != [SYSTEM_STATUS_TABLE + 1] && [SEMAPHORE_TABLE + 4 * [perprocesstable + 2*sdescriptor + 1]] != -1) do
			[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_SEMAPHORE;
			[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 5] = [perprocesstable + 2*sdescriptor + 1];
			multipush(R1,R2,R3,R4,R5,R6,R7);
			call MOD_5;
			multipop(R1,R2,R3,R4,R5,R6,R7);
		endwhile;
		[SEMAPHORE_TABLE + 4 * [perprocesstable + 2*sdescriptor + 1]] = [SYSTEM_STATUS_TABLE + 1];
		ret = 0;					//return message
	else
		ret = -1;
	endif;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
	alias physicalAddrRetVal R10;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = ret;
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	ireturn;
endif;
if (SyscallNumber == 20) then				//SemUnLock
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 20;
	alias sdescriptor R4;
	alias perprocesstable R5;
	sdescriptor = [[PTBR + 2 * ((userSP - 4)/ 512)] * 512 + (userSP - 4) % 512];
	perprocesstable = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]) * 512 + (512 - 16);
	if (sdescriptor >= 0 && sdescriptor < 8 && [perprocesstable + 2*sdescriptor] == 1) then
		if ([SEMAPHORE_TABLE + 4 * [perprocesstable + 2*sdescriptor + 1]] != -1) then
			if ([SEMAPHORE_TABLE + 4 * [perprocesstable + 2*sdescriptor + 1]] != [SYSTEM_STATUS_TABLE + 1]) then
				ret = -2;
			else
				[SEMAPHORE_TABLE + 4 * [perprocesstable + 2*sdescriptor + 1]] = -1;
				alias counter R8;
				counter = 1;
				while (counter < 16) do
					if([PROCESS_TABLE + (counter * 16) + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + (counter * 16) + 5] == [perprocesstable + 2*sdescriptor + 1]) then
						[PROCESS_TABLE + (counter * 16) + 4] = READY;
						[PROCESS_TABLE + (counter * 16) + 5] = 0;
					endif;
					counter = counter + 1;
				endwhile;
				ret = 0;
			endif;
		endif;
	else
		ret = -1;
	endif;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
	alias physicalAddrRetVal R10;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = ret;
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	ireturn;
endif;