[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
alias userSP R1;
userSP=SP;
alias ret R2;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 11]*512 - 1;
alias SyscallNumber R3;
SyscallNumber = [[PTBR + 2 * ((userSP - 5)/ 512)] * 512 + (userSP - 5) % 512];
alias perprocesstable R4;
perprocesstable = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]) * 512 + (512 - 16);
if (SyscallNumber == 2) then			//Open
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 2;
	alias filename R5;
	filename = [[PTBR + 2 * ((userSP - 4)/ 512)] * 512 + (userSP - 4) % 512];
	alias counter R6;
	alias flag R7;
	flag = 0;
	counter = 0;
	while(counter < 16) do								//find a free entry in perprocesstable
		if([perprocesstable + counter] == -1) then
			flag = 1;
			break;
		endif;
		counter = counter + 2;
	endwhile;
	if (flag != 1) then
		ret = -3;				//perprocesstable full
		goto lb2;
	endif;
	multipush(R1,R2,R3,R4,R5,R6,R7);
	R1 = 3;
	R2 = filename;
	call MOD_3;									//get open file id
	multipop(R1,R2,R3,R4,R5,R6,R7);
	if (R0 < 0) then
		ret = R0;
		goto lb2;
	endif;
	[perprocesstable + counter] = FILE;
	[perprocesstable + counter + 1] = R0;		//return value of open file manager
	ret = (counter / 2);						//index of perprocess table entry
	goto lb2;
endif;
if (SyscallNumber == 3) then				//Close
	[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 3;
	alias filedescriptor R5;
	filedescriptor = [[PTBR + 2 * ((userSP - 4)/ 512)] * 512 + (userSP - 4) % 512];
	if (filedescriptor == -1) then
		ret = -1;
		goto lb2;
	endif;
	if ([perprocesstable + 2 * filedescriptor] != FILE)	then
		ret = -1;
		goto lb2;
	endif;
	multipush(R1,R2,R3,R4,R5);
	R1 = 4;
	R2 = [perprocesstable + 2 * filedescriptor + 1];
	call MOD_3;											//close
	multipop(R1,R2,R3,R4,R5);
	[perprocesstable + 2 * filedescriptor] = -1;
	ret = 0;
	goto lb2;
endif;
if (SyscallNumber == 6) then								//seek
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 6;
	alias filedescriptor R5;
	filedescriptor = [[PTBR + 2 * ((userSP - 4)/ 512)] * 512 + (userSP - 4) % 512];
	if (filedescriptor < 0 || filedescriptor > 7) then
		ret = -1;
		goto lb2;
	endif;
	if ([perprocesstable + 2 * filedescriptor] != FILE)	then
		ret = -1;
		goto lb2;
	endif;
	alias fileindex R6;
	alias inodeindex R7;
	fileindex = [perprocesstable + 2 * filedescriptor + 1];
	inodeindex = [OPEN_FILE_TABLE + 4 * fileindex];
	multipush(R1,R2,R3,R4,R5,R6,R7);
	R1 = 4;
	R2 = inodeindex;
	R3 = [SYSTEM_STATUS_TABLE + 1];
	call MOD_0;									//acquire
	multipop(R1,R2,R3,R4,R5,R6,R7);
	if (R0 == -1) then
		ret = -1;
		goto lb2;
	endif;
	alias lseek R8;
	alias filesize R9;
	lseek = [OPEN_FILE_TABLE + 4 * fileindex + 2];
	if (inodeindex == INODE_ROOT) then
		filesize = 480;
	else
		filesize = [INODE_TABLE + inodeindex * 16 + 2];
	endif;
	alias goffset R10;
	goffset = [[PTBR + 2 * ((userSP - 3)/ 512)] * 512 + (userSP - 3) % 512];
	if (lseek + goffset < 0) then
		ret = -2;
		goto lb1;
	endif;
	if (goffset == 0) then
		[OPEN_FILE_TABLE + 4 * fileindex + 2] = 0;
	else
		if (lseek + goffset >= filesize) then
			[OPEN_FILE_TABLE + 4 * fileindex + 2] = filesize;
		else
			[OPEN_FILE_TABLE + 4 * fileindex + 2] = lseek + goffset;
		endif;
	endif;
	//print([OPEN_FILE_TABLE + 4 * fileindex + 2]);
	ret = 0;
	//release
	lb1:
		multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
		R1 = 5;
		R2 = inodeindex;
		R3 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;										//release
		multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
endif;
lb2:
	alias physicalAddrRetVal R10;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = ret;
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
	ireturn;